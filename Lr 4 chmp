
import numpy as np


def task1_1_3():
    A=np.array([
        [1,1,1,],
        [0,1,1,],
        [0,0,1,],
    ])
    B=np.array([
        [7,5,3,],
        [0,7,5,],
        [0,0,7,],
    ])
    rez=A*B-B*A
    print(f"\ntask 1\n{rez}")


def task1_2_2(): 
    A=np.array([
        [-1,0,2,],
        [0,1,0,],
        [1,2,-1,],
    ])
    rez=A**2
    print(f"\ntask 2\n{rez}")


def task1_3_1(): 
    A=np.array([
        [3,5,],
        [6,-1,],
    ])
    B=np.array([
        [2,1,],
        [-3,2,],
    ])
    rez=A*B
    print(f"\ntask 3\n{rez}")


def task1_4_1():
    A=np.array([
        [2,3,4,],
        [1,0,6,],
        [7,8,9,],
    ])
    rez=np.linalg.det(A)
    print(f"\ntask 4\n{rez}")


def task1_5_2():
    A=np.array([
        [2,3,4,1,],
        [1,2,3,4,],
        [3,4,1,2,],
        [4,1,2,3,],
    ])
    rez=np.linalg.det(A)
    print(f"\ntask 5\n{rez}")


def task1_6_1():
    A=np.array([
        [1,2,-3,],
        [0,1,2,],
        [0,0,1,],
    ])
    rez=np.linalg.inv(A)
    print(f"\ntask 6\n{rez}")


def task1_7_2():
    A=np.array([
        [1,-1,3,4,],
        [0,-1,2,1,],
        [1,1,-1,2,],
        [2,3,-5,3,],
    ])
    rez=np.linalg.matrix_rank(A)
    print(f"\ntask 7\n{rez}")


def task1_8_25():
    A = np.array([
        [3,-5,3,],
        [1,2,1,],
        [2,7,-1,],
    ])
    print(f"\ntask 8\n{A}")
    B = np.array([
        [1,],
        [4,],
        [8,],
    ])
    print(B)
    A_det = np.linalg.det(A)
    print(A_det)
    X_m = np.matrix(A)
    X_m[:, 0] = B
    print(X_m)
    Y_m = np.matrix(A)
    Y_m[:, 1] = B
    print(Y_m)
    Z_m = np.matrix(A)
    Z_m[:, 2] = B
    print(Z_m)
    x = np.linalg.det(X_m) / A_det
    y = np.linalg.det(Y_m) / A_det
    z = np.linalg.det(Z_m) / A_det
    print(x)
    print(y)
    print(z)
    X = np.linalg.solve(A, B)
    print('Перевірка X=',X)


def task2_3():
    A=np.array([
        [1,-1,3,4,5,],
        [0,-1,2,1,6,],
        [1,1,-1,2,7,],
        [2,3,-5,3,8,],
    ])
    pillars = np.mean(A, axis=0)
    print(f"\ntask 2_3\npillars\n{pillars}")
    rows = np.mean(A, axis=1)
    print(f"\nrows\n{rows}")

if __name__ == "__main__": 
    task1_1_3()
    task1_2_2()
    task1_3_1()
    task1_4_1()
    task1_5_2()
    task1_6_1()
    task1_7_2()
    task1_8_25()
    task2_3()
